[
  {
    "id": "1",
    "title": "E-commerce Platform",
    "excerpt": "A full-stack e-commerce platform built with React, Node.js",
    "image": "bg.jpg",
    "tags": ["React", "Node.js", "MongoDB", "Express"],
    "github": "https://github.com/username/ecommerce-platform",
    "demo": "https://demo-ecommerce.com",
    "blocks": [
            {
                "type": "text",
                "content": "# My Goal\nROS has always been a daunting subject for me, but I wanted to remedy that by taking a course. I took **link to course** to learn the basics of ROS, and I made a basic turtlesim project that showcases basic understanding of ROS Fundamentals\n\n# Objective\nCreate a turtlesim spawner that randomly spawns turtles within the environment. The turtlesim agent should navigate to the closest turtle at any moment of time and eliminate a spawned turtle once it touches it. To achieve this, I created the following architecture for my code. \n",
                "metadata": {}
            },
            {
                "type": "image",
                "content": "IMG_0385.jpg",
                "metadata": {}
            },
            {
                "type": "text",
                "content": "\n\n## Skills Acquired\n- Create services and clients\n- Create publishers and subscribers\n- Create custom message/service interfaces\n- Create packages\n- Create launch file \n\n# Breakdown:\nThe idea was to have three main nodes in charge of this project: spawner node, controller node, and manager node. The spawner node would keep track of all the turtles spawned and spawn the turtles. The controller node provided the ability to the turtle to navigate to any point in the map. The manager node would compute the closest spawned turtle to the driver turtle to navigate to and would handle the deletion of turtles. **NOTE: The following solution may not be the most optimal, it was just one I figure out on my own**\n\n## Spawner Node\n\n## Controller Node\n\n## Manager Node",
                "metadata": {}
            }
        ]
    }
]